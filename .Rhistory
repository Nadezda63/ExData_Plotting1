demo()
demo()
install.packages("KernSmooth")
library(KernSmooth)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
a <- makeCacheMatrix(matrix(rnorm(25),nrow = 5,ncol = 5))
a <- makeCacheMatrix(matrix(rnorm(25),nrow = 5,ncol = 5))
source("cacheMatrix.R")
setwd("")
setwd
## and to set and get the inverse of a matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y    #set the value
m <<- NULL #clear the cache
}
get <- function() x #define function to get the value of a matrix
setinverse <- function(solve) m <<- solve #calculates the inverse of the matrix and caches the result
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse) # return a list
}
## this function computes the inverse of the special matrix returned by
## makeCacheMatrix above. If the inverse has already been calculated
## then the cachesolve retrieves the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()     #this fetches the cached value for the inverse
if(!is.null(m)) {       #If the cache was not empty, then
message("getting cached data")
return(m)
}# the cache was empty
data <- x$get() #get value of a matrix
m <- solve(data, ...) #calculate inverse
x$setinverse(m)
m         #return the inverse
}
a <- makeCacheMatrix(matrix(rnorm(25),nrow = 5,ncol = 5))
a$get()
a$getinverse()
cacheSolve(a)
set.seed(1)
rpois(5, 2)
x<-rpois(5,2)
x
help(qnorm)
help(rpois)
# Code?
set.seed(10)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
e
help(rnorm)
y <- 0.5 + 2 * x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1= 3
fit <- lm(y ~ x1 + x2)
x2 <- 4
fit <- lm(y ~ x1 + x2)
x1= 3
x2 <- 4
fit <- lm(y ~ x1 + x2)
help(lm)
best("SC", "heart attack")
library(data.table)
install.packages(data.table)
getwd()
install.packages("RMySQL")
library(RMySQL)
install.packages("DBI")
install.packages("DBI")
library(DBI)
library(RMySQL)
ucsc <- dbConnect(MySQL(), user ="genome", host ="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;")
ucscDb <- dbConnect(MySQL(), user ="genome", host ="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb)
result
install.packages("jsonlite")
install.packages("httpuv")
install.packages("httr")
library(jsonlite)
library(httpuv)
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("linkedin")
# Change based on your appname, key, and secret
myapp <- oauth_app(appname = "Test_app",
key = "cf06673f8581e81573f9",
secret = "fdaa5a45e49425fb46f8ba15905867cbb875fca4")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
##############################
#  2. Question
install.packages("sqldf")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table::data.table(read.csv(f))
# Answer:
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
library("sqldf")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table::data.table(read.csv(f))
# Answer:
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
#4
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
#5
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n = 10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12",
"filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler",
"sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header = FALSE, skip = 4, col.names = colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
# getting data clean week 3
# Test
library(data.table)
housing <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
# VAL attribute says how much property is worth, .N is the number of rows
# VAL == 24 means more than $1,000,000
housing[VAL == 24, .N]
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
, 'ACS.csv'
, method='curl' )
# Read data into data.frame
ACS <- read.csv('ACS.csv')
agricultureLogical <- ACS$ACR == 3 & ACS$AGS == 6
head(which(agricultureLogical), 3)
# Download the file
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
, 'jeff.jpg'
, mode='wb' )
# Read the image
picture <- jpeg::readJPEG('jeff.jpg'
, native=TRUE)
library(jpeg)
install.packages("jpeg")
# Read the image
picture <- jpeg::readJPEG('jeff.jpg'
, native=TRUE)
# Get Sample Quantiles corressponding to given prob
quantile(picture, probs = c(0.3, 0.8) )
name(PowerData)
PowerData<-read.table("household_power_consumption.txt",header = TRUE, sep= ";")
setwd("~/Dokumente/Coursera/DataScience/Kurs 4 Exploratory Data")
PowerData<-read.table("household_power_consumption.txt",header = TRUE, sep= ";")
name(PowerData)
names(PowerData)
lapply(PowerData, class)
PowerData$Timestamp = paste(PowerData$Date, PowerData$Time)
PowerData$Timestamp = strptime(PowerData$Timestamp, "%d/%m/%Y %H:%M:%S")
head(PowerData$Timestamp)
begin<-which(PowerData$Timestamp==strptime("2007-02-01", "%Y-%m-%d"))
end<-which(PowerData$Timestamp==strptime("2007-02-02 23:59:00", "%Y-%m-%d %H:%M:%S"))
data<-PowerData[start:end,]
data<-PowerData[begin:end,]
data
hist(as.numeric(as.character(data2$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)", col="red")
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)", col="red")
png("Plot1.png", width =400, height = 400)
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)", col="red")
dev.off()
png("Plot2.png", width =400, height = 400)
plot(data$Timestamp, as.numeric(as.character(data$Global_active_power)),
type='l',ylab="Global Active Power (Kilowatts)", xlab="")
dev.off()
png("Plot3.png", width =400, height = 400)
plot(data$Timestamp, as.numeric(as.character(data$Sub_metering_1)),type='l',
ylab ="Energy sub metering", xlab="")
lines(data$Timestamp, as.numeric(as.character(data$Sub_metering_2)),type='l', col='red')
lines(data$Timestamp, data2$Sub_metering_3,type='l', col="blue")
lines(data$Timestamp, data$Sub_metering_3,type='l', col="blue")
legend('topright', c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty=c(1,1,1)
,col=c("black","red","blue"))
dev.off()
png("Plot4.png", width =400, height = 400)
par(mfcol=c(2,2))
plot(data$Timestamp, as.numeric(as.character(data$Global_active_power)),type='l',ylab="Global Active Power", xlab="")
plot(data$Timestamp, as.numeric(as.character(data$Sub_metering_1)),type='l', xlab="",ylab ="Energy sub metering")
lines(data$Timestamp, as.numeric(as.character(data$Sub_metering_2)),type='l', col='red')
lines(data$Timestamp, data$Sub_metering_3,type='l', col="blue")
legend('topright', c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty=c(1,1,1),col=c("black","red","blue"))
plot(data$Timestamp, as.numeric(as.character(data$Voltage)),type='l',
ylab="Voltage",xlab="datetime" )
plot(data$Timestamp, as.numeric(as.character(data$Global_reactive_power)),type='l',
ylab="Global_reactive_power",xlab="datetime" )
dev.off()
png("Plot1.png", width =480, height = 480)
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)", col="red")
dev.off()
setwd("~/Documents/GitHub/Assignment2/ExData_Plotting1")
png("Plot1.png", width =480, height = 480)
hist(as.numeric(as.character(data$Global_active_power)),
main="Global Active Power",
xlab="Global Active Power (kilowatts)", col="red")
dev.off()
png("Plot2.png", width =480, height = 480)
plot(data$Timestamp, as.numeric(as.character(data$Global_active_power)),
type='l',ylab="Global Active Power (Kilowatts)", xlab="")
dev.off()
png("Plot3.png", width =480, height = 480)
plot(data$Timestamp, as.numeric(as.character(data$Sub_metering_1)),type='l',
ylab ="Energy sub metering", xlab="")
lines(data$Timestamp, as.numeric(as.character(data$Sub_metering_2)),type='l', col='red')
lines(data$Timestamp, data$Sub_metering_3,type='l', col="blue")
legend('topright', c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty=c(1,1,1)
,col=c("black","red","blue"))
dev.off()
png("Plot4.png", width =480, height = 480)
par(mfcol=c(2,2))
plot(data$Timestamp, as.numeric(as.character(data$Global_active_power)),type='l',ylab="Global Active Power", xlab="")
plot(data$Timestamp, as.numeric(as.character(data$Sub_metering_1)),type='l', xlab="",ylab ="Energy sub metering")
lines(data$Timestamp, as.numeric(as.character(data$Sub_metering_2)),type='l', col='red')
lines(data$Timestamp, data$Sub_metering_3,type='l', col="blue")
legend('topright', c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty=c(1,1,1),col=c("black","red","blue"))
plot(data$Timestamp, as.numeric(as.character(data$Voltage)),type='l',
ylab="Voltage",xlab="datetime" )
plot(data$Timestamp, as.numeric(as.character(data$Global_reactive_power)),type='l',
ylab="Global_reactive_power",xlab="datetime" )
dev.off()
